import pandas as pd
import re
from rdkit import Chem
from rdkit.Chem.Scaffolds import MurckoScaffold
from rdkit.Chem import rdRGroupDecomposition
import csv, gc

# === Config ===
min_compound_per_scaffold = 10
output_file = "rgroup_with_labels.csv"

# === Regex patterns lo·∫°i b·ªè R-group r√°c ===
atom_groups = {
    "H":  [r"^\[H\]\[\*\:\d+\]$"],
    "O":  [r"^\[O[+-]?\]\[\*\:\d+\]$", r"^O\[\*\:\d+\]$"],
    "N":  [r"^\[N[+-]?\]\[\*\:\d+\]$", r"^N\[\*\:\d+\]$"],
    "S":  [r"^\[S[+-]?\]\[\*\:\d+\]$", r"^S\[\*\:\d+\]$"],
    "C":  [r"^\[C[+-]?\]\[\*\:\d+\]$", r"^C\[\*\:\d+\]$"],
    "F":  [r"^F\[\*\:\d+\]$"],
    "Cl": [r"^\[Cl-?\]\[\*\:\d+\]$", r"^Cl\[\*\:\d+\]$"],
    "Br": [r"^\[Br-?\]\[\*\:\d+\]$", r"^Br\[\*\:\d+\]$"],
    "I":  [r"^\[I-?\]\[\*\:\d+\]$", r"^I\[\*\:\d+\]$"],
}

general_patterns = [
    r"^\[\*\:\d+\]$",  # ch·ªâ attachment point
    r"^[CONSFIBrcl]+\[\*\:\d+\](\.[CONSFIBrcl]+\[\*\:\d+\])+"
]

all_patterns = [pat for pats in atom_groups.values() for pat in pats] + general_patterns
bad_pattern_union = re.compile("|".join(all_patterns))

def is_garbage_rgroup(smi):
    return bool(bad_pattern_union.match(smi))

# === STEP 1: ƒê·ªçc d·ªØ li·ªáu ===
print("üì• ƒê·ªçc d·ªØ li·ªáu...")
df = pd.read_csv("InFlam_full.csv")  # c·∫ßn c√≥ c·ªôt 'canonical_smiles' v√† 'Label'
df = df.dropna(subset=['canonical_smiles', 'Label'])
print(f"üëâ S·ªë d√≤ng ban ƒë·∫ßu: {len(df)}")

# T·∫°o molecule v√† scaffold
print("üîÑ Chuy·ªÉn SMILES th√†nh molecule...")
df['mol'] = df['canonical_smiles'].apply(Chem.MolFromSmiles)
df = df[df['mol'].notnull()]
print(f"üëâ Sau khi l·ªçc mol h·ª£p l·ªá: {len(df)}")

print("üîÑ Sinh scaffold (MurckoScaffold)...")
df['scaffold'] = df['mol'].apply(lambda m: Chem.MolToSmiles(MurckoScaffold.GetScaffoldForMol(m)) if m else None)

# L·ªçc scaffold c√≥ √≠t nh·∫•t min_compound_per_scaffold
df_scaffold_counts = df['scaffold'].value_counts()
valid_scaffolds = df_scaffold_counts[df_scaffold_counts >= min_compound_per_scaffold].index
df = df[df['scaffold'].isin(valid_scaffolds)]

scaffolds = df['scaffold'].nunique()
print(f"üëâ Sau khi l·ªçc, c√≤n {scaffolds} scaffold v·ªõi ‚â•{min_compound_per_scaffold} compound")

# === STEP 2: Chu·∫©n b·ªã file output (ghi t·ª´ng ph·∫ßn) ===
processed = 0
skipped = 0

with open(output_file, "w", newline="") as f:
    writer = csv.DictWriter(f, fieldnames=['scaffold','rgroup_label','rgroup_smiles','compound_index','Label'])
    writer.writeheader()

    for idx, (scaffold_smiles, group) in enumerate(df.groupby('scaffold'), 1):
        if len(group) < min_compound_per_scaffold:
            skipped += 1
            print(f"‚è© B·ªè qua scaffold {idx}/{scaffolds} (ch·ªâ c√≥ {len(group)} compound)")
            continue

        processed += 1
        print(f"üîπ X·ª≠ l√Ω scaffold {idx}/{scaffolds} v·ªõi {len(group)} compound...")

        try:
            scaffold_mol = Chem.MolFromSmiles(scaffold_smiles)
            if scaffold_mol is None:
                print("‚ö†Ô∏è Scaffold kh√¥ng h·ª£p l·ªá, b·ªè qua.")
                skipped += 1
                continue

            # === STEP 3: RGroup decomposition ===
            decomp = rdRGroupDecomposition.RGroupDecomposition([scaffold_mol])
            mols = group['mol'].tolist()
            for mol in mols:
                decomp.Add(mol)
            decomp.Process()
            rgroups_raw = decomp.GetRGroupsAsRows()

            # === STEP 4: G·∫Øn v·ªõi Label v√† ghi ra file ngay ===
            results_scaffold = []
            for i, rgroup in enumerate(rgroups_raw):
                label_val = group.iloc[i]['Label']
                for r_label, r_mol in rgroup.items():
                    if r_label == "Core":
                        continue
                    smi = Chem.MolToSmiles(r_mol) if r_mol else None
                    if smi and not is_garbage_rgroup(smi):  # l·ªçc r√°c
                        results_scaffold.append({
                            'scaffold': scaffold_smiles,
                            'rgroup_label': r_label,
                            'rgroup_smiles': smi,
                            'compound_index': group.index[i],
                            'Label': label_val
                        })

            if results_scaffold:
                writer.writerows(results_scaffold)
                f.flush()

        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω scaffold {scaffold_smiles}: {e}")
            skipped += 1
            continue

        # Gi·∫£i ph√≥ng b·ªô nh·ªõ
        del group, scaffold_smiles, scaffold_mol, mols, rgroups_raw, results_scaffold
        gc.collect()

print("üìë Ho√†n t·∫•t tr√≠ch xu·∫•t R-group, ƒë√£ l∆∞u t·ª´ng ph·∫ßn v√†o:", output_file)

# === STEP 3: T√≠nh enrichment sau khi ƒë√£ c√≥ file R-group ===
print("üìä T√≠nh enrichment...")
df_rgroup = pd.read_csv(output_file)

def compute_enrichment(df_rgroup):
    stats = []
    grouped = df_rgroup.groupby(['rgroup_label', 'rgroup_smiles'])
    total_1 = (df_rgroup['Label'] == 1).sum()
    total_0 = (df_rgroup['Label'] == 0).sum()

    for (r_label, r_smi), group in grouped:
        count_1 = (group['Label'] == 1).sum()
        count_0 = (group['Label'] == 0).sum()

        freq_1 = count_1 / total_1 if total_1 else 0
        freq_0 = count_0 / total_0 if total_0 else 0
        enrichment = (freq_1 / freq_0) if freq_0 > 0 else float('inf')

        stats.append({
            'rgroup_label': r_label,
            'rgroup_smiles': r_smi,
            'active_count': count_1,
            'inactive_count': count_0,
            'enrichment_score': enrichment
        })
    return pd.DataFrame(stats).sort_values('enrichment_score', ascending=False)

df_enrichment = compute_enrichment(df_rgroup)
df_enrichment.to_csv("rgroup_enrichment_summary_2.csv", index=False)

# === STEP 4: G√°n nh√£n enrichment (0/1 theo ng∆∞·ª°ng) ===
def assign_labels_enrichment(df, threshold_high=2, threshold_low=0.5):
    records = []
    for _, row in df.iterrows():
        if row['enrichment_score'] >= threshold_high:
            final_label = 1
        elif row['enrichment_score'] <= threshold_low:
            final_label = 0
        else:
            final_label = None  # trung t√≠nh
        records.append({**row, 'final_label_enrichment': final_label})
    return pd.DataFrame(records)

df_labeled_enrichment = assign_labels_enrichment(df_enrichment)
df_labeled_enrichment.to_csv("rgroup_labeled_enrichment.csv", index=False)

# === STEP 5: G√°n nh√£n majority vote ===
def assign_labels_majority(df_rgroup):
    grouped = df_rgroup.groupby(['rgroup_label','rgroup_smiles'])
    records = []
    for (r_label, smi), g in grouped:
        count_1 = (g['Label'] == 1).sum()
        count_0 = (g['Label'] == 0).sum()
        if count_1 > count_0:
            final_label = 1
        elif count_0 > count_1:
            final_label = 0
        else:
            final_label = None
        records.append({
            'rgroup_label': r_label,
            'rgroup_smiles': smi,
            'active_count': count_1,
            'inactive_count': count_0,
            'final_label_majority': final_label
        })
    return pd.DataFrame(records)

df_labeled_majority = assign_labels_majority(df_rgroup)
df_labeled_majority.to_csv("rgroup_labeled_majority.csv", index=False)

# === STEP 6: Summary cu·ªëi c√πng ===
print("\nüìä T√≥m t·∫Øt:")
print(f"- Scaffold ƒë∆∞·ª£c x·ª≠ l√Ω: {processed}")
print(f"- Scaffold b·ªã b·ªè qua (<{min_compound_per_scaffold} ho·∫∑c l·ªói): {skipped}")
print(f"- T·ªïng scaffold ƒë·ªß ƒëi·ªÅu ki·ªán: {scaffolds}")
print(f"- T·ªïng R-group tr√≠ch xu·∫•t: {len(df_rgroup)}")
print(f"- T·ªïng R-group duy nh·∫•t: {df_enrichment.shape[0]}")

print("\n‚úÖ Ho√†n t·∫•t x·ª≠ l√Ω!")
print("- ƒê√£ l∆∞u chi ti·∫øt R-group:", output_file)
print("- ƒê√£ l∆∞u b·∫£ng enrichment: rgroup_enrichment_summary_2.csv")
print("- ƒê√£ l∆∞u nh√£n theo enrichment:", "rgroup_labeled_enrichment.csv")
print("- ƒê√£ l∆∞u nh√£n theo majority vote:", "rgroup_labeled_majority.csv")
